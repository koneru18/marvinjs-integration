{"version":3,"sources":["api.js","SearchResults.js","Editor.js","App.js","serviceWorker.js","index.js"],"names":["fetchSearchResults","molecule","axios","post","hitCount","withFingerprintDistance","saveMolecule","payload","getSmiles","structure","inputParams","outputParams","headers","columns","Header","accessor","headerStyle","whiteSpace","style","SearchResults","data","smiles","width","display","borderBottom","marginTop","marginBottom","manual","minRows","pageSize","pages","showPagination","Iframe","styled","iframe","EditorComponent","props","a","async","response","arr","i","length","push","setState","searchResults","marvinInstance","state","mrvFormat","exportAsMrv","bind","setTimeout","initMarvinJS","window","MarvinJSUtil","getEditor","then","sketcherInstance","console","log","setUpMarvinJS","catch","error","this","id","src","onClick","Component","App","className","Editor","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5bd9232a.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport function fetchSearchResults(molecule) {\n  return axios.post(\n    \"http://localhost:8081/jwsdb/rest-v1/db/additional/testExtendedTable/substructure\",\n    {\n      hitCount: 10,\n      molecule,\n      withFingerprintDistance: true\n    }\n  );\n}\n\nexport function saveMolecule(payload) {\n  const response = axios.post(\n    \"http://localhost:8081/jwsdb/rest-v1/db/additional/testExtendedTable/batchInsert\",\n    payload\n  );\n  return response;\n}\n\nexport function getSmiles(structure) {\n  const params = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const payload = {\n    inputParams: \"mrv\",\n    outputParams: \"smiles\",\n    structure\n  };\n  return axios.post(\n    \"http://localhost:8081/jwsio/rest-v1/molconvert\",\n    payload,\n    params\n  );\n}\n","import React from \"react\";\nimport ReactTable from \"react-table-v6\";\nimport \"react-table-v6/react-table.css\";\n\n// const SearchResults = data => (\n//   <table>\n//     <tr>\n//       <th>Header Row 1</th>\n//       {/* <th>Header Row 2</th> */}\n//       {/* <th>Header Row 3</th> */}\n//     </tr>\n//     {data.map((value, index) => {\n//       return (\n//         <tr key={index}>\n//           <td>{value.id}</td>\n//           <td>{index}</td>\n//           {/* <td>{value}</td> */}\n//         </tr>\n//       );\n//     })}\n//   </table>\n// );\n\nconst columns = [\n  {\n    Header: \"Name\",\n    accessor: \"additionalData.name\",\n    headerStyle: { whiteSpace: \"unset\" },\n    style: { whiteSpace: \"unset\" }\n  },\n  {\n    Header: \"Smiles structure\",\n    accessor: \"molecule\",\n    headerStyle: { whiteSpace: \"unset\" },\n    style: { whiteSpace: \"unset\" }\n  },\n  {\n    Header: \"Finger Print Distance\",\n    accessor: \"additionalData.fingerprintDistance\",\n    headerStyle: { whiteSpace: \"unset\" },\n    style: { whiteSpace: \"unset\" }\n  }\n];\nconst SearchResults = (data, smiles) => {\n  return (\n    // <div>Search results for {smiles}</div>\n    // data.length > 0 && (\n    <div style={{ width: 650, display: \"inline-block\" }}>\n      <div\n        style={{\n          borderBottom: \"1px solid #888\",\n          marginTop: \"10px\",\n          marginBottom: \"10px\"\n        }}\n      >\n        Search results for {smiles}\n      </div>\n      <ReactTable\n        manual\n        minRows={0}\n        pageSize={1}\n        data={data.data}\n        columns={columns}\n        pages={0}\n        showPagination={true}\n      />\n    </div>\n    // )\n  );\n};\n\nexport default SearchResults;\n","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport { getSmiles, saveMolecule, fetchSearchResults } from \"./api\";\nimport SearchResults from \"./SearchResults\";\n\nconst Iframe = styled.iframe`\n  overflow: hidden;\n  min-width: 700px;\n  min-height: 450px;\n  border: 1px solid darkgray;\n`;\n\nclass EditorComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { marvinInstance: {}, smiles: \"\", searchResults: [] };\n    this.getSmiles = this.getSmiles.bind(this);\n  }\n\n  componentDidMount() {\n    setTimeout(() => {\n      this.initMarvinJS();\n    }, 1000);\n  }\n\n  initMarvinJS() {\n    window.MarvinJSUtil.getEditor(\"#sketchImg\")\n      .then(sketcherInstance => {\n        console.log(sketcherInstance);\n        this.setState(\n          {\n            marvinInstance: sketcherInstance\n          },\n          this.setUpMarvinJS()\n        );\n      })\n      .catch(error => {\n        console.error(`Fail during MarvinJs initilisation: ${error}`);\n      });\n  }\n\n  setUpMarvinJS() {\n    const { marvinInstance } = this.state;\n  }\n\n  saveMolecule = async () => {\n    const payload = {};\n    await saveMolecule(payload);\n  };\n\n  fetchSearchResults = async () => {\n    // const molecule = \"c1ccccc1\";\n    const molecule = await this.getSmiles();\n    const response = await fetchSearchResults(molecule);\n    // console.log(response.data, typeof response.data);\n    let arr = [];\n    for (let i = 0; i < response.data.length; i++) {\n      arr.push(response.data[i]);\n    }\n    this.setState({\n      searchResults: arr\n    });\n  };\n\n  getSmiles = async () => {\n    const { marvinInstance } = this.state;\n    const mrvFormat = marvinInstance.exportAsMrv();\n    const smiles = await getSmiles(mrvFormat);\n    this.setState({\n      smiles: smiles.data\n    });\n    return smiles.data;\n  };\n\n  render() {\n    // console.log(\n    //   `Search Results: ${JSON.stringify(\n    //     this.state.searchResults\n    //   )}, typeof: ${typeof this.state.searchResults}`\n    // );\n    return (\n      <div>\n        <Iframe id=\"sketchImg\" src=\"marvinjs/editorws.html\" />\n        <button onClick={this.saveMolecule}>Save</button>\n        <button onClick={this.fetchSearchResults}>Search</button>\n        {/* <button onClick={this.getSmiles}> GetSmiles </button>\n        Smiles: {this.state.smiles} */}\n        {this.state.searchResults.length > 0 && (\n          <SearchResults\n            data={this.state.searchResults}\n            smiles={this.state.smiles}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default EditorComponent;\n","import React from \"react\";\n// import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Editor from \"./Editor\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Editor />\n      {/* <header className=\"App-header\"> */}\n      {/* <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a> */}\n      {/* </header> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}